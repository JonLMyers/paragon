// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/kcarretto/paragon/ent/task"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	QueueTime     *int64
	ClaimTime     *int64
	ExecStartTime *int64
	ExecStopTime  *int64
	Content       *string
	Output        *[]string
	Error         *string
	SessionID     *string
	target        map[int]struct{}
}

// SetQueueTime sets the QueueTime field.
func (tc *TaskCreate) SetQueueTime(i int64) *TaskCreate {
	tc.QueueTime = &i
	return tc
}

// SetNillableQueueTime sets the QueueTime field if the given value is not nil.
func (tc *TaskCreate) SetNillableQueueTime(i *int64) *TaskCreate {
	if i != nil {
		tc.SetQueueTime(*i)
	}
	return tc
}

// SetClaimTime sets the ClaimTime field.
func (tc *TaskCreate) SetClaimTime(i int64) *TaskCreate {
	tc.ClaimTime = &i
	return tc
}

// SetNillableClaimTime sets the ClaimTime field if the given value is not nil.
func (tc *TaskCreate) SetNillableClaimTime(i *int64) *TaskCreate {
	if i != nil {
		tc.SetClaimTime(*i)
	}
	return tc
}

// SetExecStartTime sets the ExecStartTime field.
func (tc *TaskCreate) SetExecStartTime(i int64) *TaskCreate {
	tc.ExecStartTime = &i
	return tc
}

// SetNillableExecStartTime sets the ExecStartTime field if the given value is not nil.
func (tc *TaskCreate) SetNillableExecStartTime(i *int64) *TaskCreate {
	if i != nil {
		tc.SetExecStartTime(*i)
	}
	return tc
}

// SetExecStopTime sets the ExecStopTime field.
func (tc *TaskCreate) SetExecStopTime(i int64) *TaskCreate {
	tc.ExecStopTime = &i
	return tc
}

// SetNillableExecStopTime sets the ExecStopTime field if the given value is not nil.
func (tc *TaskCreate) SetNillableExecStopTime(i *int64) *TaskCreate {
	if i != nil {
		tc.SetExecStopTime(*i)
	}
	return tc
}

// SetContent sets the Content field.
func (tc *TaskCreate) SetContent(s string) *TaskCreate {
	tc.Content = &s
	return tc
}

// SetOutput sets the Output field.
func (tc *TaskCreate) SetOutput(s []string) *TaskCreate {
	tc.Output = &s
	return tc
}

// SetError sets the Error field.
func (tc *TaskCreate) SetError(s string) *TaskCreate {
	tc.Error = &s
	return tc
}

// SetNillableError sets the Error field if the given value is not nil.
func (tc *TaskCreate) SetNillableError(s *string) *TaskCreate {
	if s != nil {
		tc.SetError(*s)
	}
	return tc
}

// SetSessionID sets the SessionID field.
func (tc *TaskCreate) SetSessionID(s string) *TaskCreate {
	tc.SessionID = &s
	return tc
}

// SetNillableSessionID sets the SessionID field if the given value is not nil.
func (tc *TaskCreate) SetNillableSessionID(s *string) *TaskCreate {
	if s != nil {
		tc.SetSessionID(*s)
	}
	return tc
}

// SetTargetID sets the target edge to Target by id.
func (tc *TaskCreate) SetTargetID(id int) *TaskCreate {
	if tc.target == nil {
		tc.target = make(map[int]struct{})
	}
	tc.target[id] = struct{}{}
	return tc
}

// SetTarget sets the target edge to Target.
func (tc *TaskCreate) SetTarget(t *Target) *TaskCreate {
	return tc.SetTargetID(t.ID)
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	if tc.QueueTime == nil {
		v := task.DefaultQueueTime
		tc.QueueTime = &v
	}
	if tc.Content == nil {
		return nil, errors.New("ent: missing required field \"Content\"")
	}
	if err := task.ContentValidator(*tc.Content); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"Content\": %v", err)
	}
	if len(tc.target) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"target\"")
	}
	if tc.target == nil {
		return nil, errors.New("ent: missing required edge \"target\"")
	}
	return tc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	var (
		res sql.Result
		t   = &Task{config: tc.config}
	)
	tx, err := tc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	builder := sql.Dialect(tc.driver.Dialect()).
		Insert(task.Table).
		Default()
	if value := tc.QueueTime; value != nil {
		builder.Set(task.FieldQueueTime, *value)
		t.QueueTime = *value
	}
	if value := tc.ClaimTime; value != nil {
		builder.Set(task.FieldClaimTime, *value)
		t.ClaimTime = *value
	}
	if value := tc.ExecStartTime; value != nil {
		builder.Set(task.FieldExecStartTime, *value)
		t.ExecStartTime = *value
	}
	if value := tc.ExecStopTime; value != nil {
		builder.Set(task.FieldExecStopTime, *value)
		t.ExecStopTime = *value
	}
	if value := tc.Content; value != nil {
		builder.Set(task.FieldContent, *value)
		t.Content = *value
	}
	if value := tc.Output; value != nil {
		buf, err := json.Marshal(*value)
		if err != nil {
			return nil, err
		}
		builder.Set(task.FieldOutput, buf)
		t.Output = *value
	}
	if value := tc.Error; value != nil {
		builder.Set(task.FieldError, *value)
		t.Error = *value
	}
	if value := tc.SessionID; value != nil {
		builder.Set(task.FieldSessionID, *value)
		t.SessionID = *value
	}
	query, args := builder.Query()
	if err := tx.Exec(ctx, query, args, &res); err != nil {
		return nil, rollback(tx, err)
	}
	id, err := res.LastInsertId()
	if err != nil {
		return nil, rollback(tx, err)
	}
	t.ID = int(id)
	if len(tc.target) > 0 {
		for eid := range tc.target {
			query, args := sql.Update(task.TargetTable).
				Set(task.TargetColumn, eid).
				Where(sql.EQ(task.FieldID, id)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return t, nil
}
