// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/kcarretto/paragon/ent/predicate"
	"github.com/kcarretto/paragon/ent/target"
	"github.com/kcarretto/paragon/ent/task"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	QueueTime          *int64
	addQueueTime       *int64
	ClaimTime          *int64
	addClaimTime       *int64
	clearClaimTime     bool
	ExecStartTime      *int64
	addExecStartTime   *int64
	clearExecStartTime bool
	ExecStopTime       *int64
	addExecStopTime    *int64
	clearExecStopTime  bool
	Content            *string
	Output             *[]string
	clearOutput        bool
	Error              *string
	clearError         bool
	SessionID          *string
	clearSessionID     bool
	target             map[int]struct{}
	clearedTarget      bool
	predicates         []predicate.Task
}

// Where adds a new predicate for the builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.predicates = append(tu.predicates, ps...)
	return tu
}

// SetQueueTime sets the QueueTime field.
func (tu *TaskUpdate) SetQueueTime(i int64) *TaskUpdate {
	tu.QueueTime = &i
	tu.addQueueTime = nil
	return tu
}

// SetNillableQueueTime sets the QueueTime field if the given value is not nil.
func (tu *TaskUpdate) SetNillableQueueTime(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetQueueTime(*i)
	}
	return tu
}

// AddQueueTime adds i to QueueTime.
func (tu *TaskUpdate) AddQueueTime(i int64) *TaskUpdate {
	if tu.addQueueTime == nil {
		tu.addQueueTime = &i
	} else {
		*tu.addQueueTime += i
	}
	return tu
}

// SetClaimTime sets the ClaimTime field.
func (tu *TaskUpdate) SetClaimTime(i int64) *TaskUpdate {
	tu.ClaimTime = &i
	tu.addClaimTime = nil
	return tu
}

// SetNillableClaimTime sets the ClaimTime field if the given value is not nil.
func (tu *TaskUpdate) SetNillableClaimTime(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetClaimTime(*i)
	}
	return tu
}

// AddClaimTime adds i to ClaimTime.
func (tu *TaskUpdate) AddClaimTime(i int64) *TaskUpdate {
	if tu.addClaimTime == nil {
		tu.addClaimTime = &i
	} else {
		*tu.addClaimTime += i
	}
	return tu
}

// ClearClaimTime clears the value of ClaimTime.
func (tu *TaskUpdate) ClearClaimTime() *TaskUpdate {
	tu.ClaimTime = nil
	tu.clearClaimTime = true
	return tu
}

// SetExecStartTime sets the ExecStartTime field.
func (tu *TaskUpdate) SetExecStartTime(i int64) *TaskUpdate {
	tu.ExecStartTime = &i
	tu.addExecStartTime = nil
	return tu
}

// SetNillableExecStartTime sets the ExecStartTime field if the given value is not nil.
func (tu *TaskUpdate) SetNillableExecStartTime(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetExecStartTime(*i)
	}
	return tu
}

// AddExecStartTime adds i to ExecStartTime.
func (tu *TaskUpdate) AddExecStartTime(i int64) *TaskUpdate {
	if tu.addExecStartTime == nil {
		tu.addExecStartTime = &i
	} else {
		*tu.addExecStartTime += i
	}
	return tu
}

// ClearExecStartTime clears the value of ExecStartTime.
func (tu *TaskUpdate) ClearExecStartTime() *TaskUpdate {
	tu.ExecStartTime = nil
	tu.clearExecStartTime = true
	return tu
}

// SetExecStopTime sets the ExecStopTime field.
func (tu *TaskUpdate) SetExecStopTime(i int64) *TaskUpdate {
	tu.ExecStopTime = &i
	tu.addExecStopTime = nil
	return tu
}

// SetNillableExecStopTime sets the ExecStopTime field if the given value is not nil.
func (tu *TaskUpdate) SetNillableExecStopTime(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetExecStopTime(*i)
	}
	return tu
}

// AddExecStopTime adds i to ExecStopTime.
func (tu *TaskUpdate) AddExecStopTime(i int64) *TaskUpdate {
	if tu.addExecStopTime == nil {
		tu.addExecStopTime = &i
	} else {
		*tu.addExecStopTime += i
	}
	return tu
}

// ClearExecStopTime clears the value of ExecStopTime.
func (tu *TaskUpdate) ClearExecStopTime() *TaskUpdate {
	tu.ExecStopTime = nil
	tu.clearExecStopTime = true
	return tu
}

// SetContent sets the Content field.
func (tu *TaskUpdate) SetContent(s string) *TaskUpdate {
	tu.Content = &s
	return tu
}

// SetOutput sets the Output field.
func (tu *TaskUpdate) SetOutput(s []string) *TaskUpdate {
	tu.Output = &s
	return tu
}

// ClearOutput clears the value of Output.
func (tu *TaskUpdate) ClearOutput() *TaskUpdate {
	tu.Output = nil
	tu.clearOutput = true
	return tu
}

// SetError sets the Error field.
func (tu *TaskUpdate) SetError(s string) *TaskUpdate {
	tu.Error = &s
	return tu
}

// SetNillableError sets the Error field if the given value is not nil.
func (tu *TaskUpdate) SetNillableError(s *string) *TaskUpdate {
	if s != nil {
		tu.SetError(*s)
	}
	return tu
}

// ClearError clears the value of Error.
func (tu *TaskUpdate) ClearError() *TaskUpdate {
	tu.Error = nil
	tu.clearError = true
	return tu
}

// SetSessionID sets the SessionID field.
func (tu *TaskUpdate) SetSessionID(s string) *TaskUpdate {
	tu.SessionID = &s
	return tu
}

// SetNillableSessionID sets the SessionID field if the given value is not nil.
func (tu *TaskUpdate) SetNillableSessionID(s *string) *TaskUpdate {
	if s != nil {
		tu.SetSessionID(*s)
	}
	return tu
}

// ClearSessionID clears the value of SessionID.
func (tu *TaskUpdate) ClearSessionID() *TaskUpdate {
	tu.SessionID = nil
	tu.clearSessionID = true
	return tu
}

// SetTargetID sets the target edge to Target by id.
func (tu *TaskUpdate) SetTargetID(id int) *TaskUpdate {
	if tu.target == nil {
		tu.target = make(map[int]struct{})
	}
	tu.target[id] = struct{}{}
	return tu
}

// SetTarget sets the target edge to Target.
func (tu *TaskUpdate) SetTarget(t *Target) *TaskUpdate {
	return tu.SetTargetID(t.ID)
}

// ClearTarget clears the target edge to Target.
func (tu *TaskUpdate) ClearTarget() *TaskUpdate {
	tu.clearedTarget = true
	return tu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	if tu.Content != nil {
		if err := task.ContentValidator(*tu.Content); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"Content\": %v", err)
		}
	}
	if len(tu.target) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"target\"")
	}
	if tu.clearedTarget && tu.target == nil {
		return 0, errors.New("ent: clearing a unique edge \"target\"")
	}
	return tu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	selector := sql.Select(task.FieldID).From(sql.Table(task.Table))
	for _, p := range tu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = tu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := tu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		builder = sql.Update(task.Table).Where(sql.InInts(task.FieldID, ids...))
	)
	if value := tu.QueueTime; value != nil {
		builder.Set(task.FieldQueueTime, *value)
	}
	if value := tu.addQueueTime; value != nil {
		builder.Add(task.FieldQueueTime, *value)
	}
	if value := tu.ClaimTime; value != nil {
		builder.Set(task.FieldClaimTime, *value)
	}
	if value := tu.addClaimTime; value != nil {
		builder.Add(task.FieldClaimTime, *value)
	}
	if tu.clearClaimTime {
		builder.SetNull(task.FieldClaimTime)
	}
	if value := tu.ExecStartTime; value != nil {
		builder.Set(task.FieldExecStartTime, *value)
	}
	if value := tu.addExecStartTime; value != nil {
		builder.Add(task.FieldExecStartTime, *value)
	}
	if tu.clearExecStartTime {
		builder.SetNull(task.FieldExecStartTime)
	}
	if value := tu.ExecStopTime; value != nil {
		builder.Set(task.FieldExecStopTime, *value)
	}
	if value := tu.addExecStopTime; value != nil {
		builder.Add(task.FieldExecStopTime, *value)
	}
	if tu.clearExecStopTime {
		builder.SetNull(task.FieldExecStopTime)
	}
	if value := tu.Content; value != nil {
		builder.Set(task.FieldContent, *value)
	}
	if value := tu.Output; value != nil {
		buf, err := json.Marshal(*value)
		if err != nil {
			return 0, err
		}
		builder.Set(task.FieldOutput, buf)
	}
	if tu.clearOutput {
		builder.SetNull(task.FieldOutput)
	}
	if value := tu.Error; value != nil {
		builder.Set(task.FieldError, *value)
	}
	if tu.clearError {
		builder.SetNull(task.FieldError)
	}
	if value := tu.SessionID; value != nil {
		builder.Set(task.FieldSessionID, *value)
	}
	if tu.clearSessionID {
		builder.SetNull(task.FieldSessionID)
	}
	if !builder.Empty() {
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if tu.clearedTarget {
		query, args := sql.Update(task.TargetTable).
			SetNull(task.TargetColumn).
			Where(sql.InInts(target.FieldID, ids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(tu.target) > 0 {
		for eid := range tu.target {
			query, args := sql.Update(task.TargetTable).
				Set(task.TargetColumn, eid).
				Where(sql.InInts(task.FieldID, ids...)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return 0, rollback(tx, err)
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	id                 int
	QueueTime          *int64
	addQueueTime       *int64
	ClaimTime          *int64
	addClaimTime       *int64
	clearClaimTime     bool
	ExecStartTime      *int64
	addExecStartTime   *int64
	clearExecStartTime bool
	ExecStopTime       *int64
	addExecStopTime    *int64
	clearExecStopTime  bool
	Content            *string
	Output             *[]string
	clearOutput        bool
	Error              *string
	clearError         bool
	SessionID          *string
	clearSessionID     bool
	target             map[int]struct{}
	clearedTarget      bool
}

// SetQueueTime sets the QueueTime field.
func (tuo *TaskUpdateOne) SetQueueTime(i int64) *TaskUpdateOne {
	tuo.QueueTime = &i
	tuo.addQueueTime = nil
	return tuo
}

// SetNillableQueueTime sets the QueueTime field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableQueueTime(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetQueueTime(*i)
	}
	return tuo
}

// AddQueueTime adds i to QueueTime.
func (tuo *TaskUpdateOne) AddQueueTime(i int64) *TaskUpdateOne {
	if tuo.addQueueTime == nil {
		tuo.addQueueTime = &i
	} else {
		*tuo.addQueueTime += i
	}
	return tuo
}

// SetClaimTime sets the ClaimTime field.
func (tuo *TaskUpdateOne) SetClaimTime(i int64) *TaskUpdateOne {
	tuo.ClaimTime = &i
	tuo.addClaimTime = nil
	return tuo
}

// SetNillableClaimTime sets the ClaimTime field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableClaimTime(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetClaimTime(*i)
	}
	return tuo
}

// AddClaimTime adds i to ClaimTime.
func (tuo *TaskUpdateOne) AddClaimTime(i int64) *TaskUpdateOne {
	if tuo.addClaimTime == nil {
		tuo.addClaimTime = &i
	} else {
		*tuo.addClaimTime += i
	}
	return tuo
}

// ClearClaimTime clears the value of ClaimTime.
func (tuo *TaskUpdateOne) ClearClaimTime() *TaskUpdateOne {
	tuo.ClaimTime = nil
	tuo.clearClaimTime = true
	return tuo
}

// SetExecStartTime sets the ExecStartTime field.
func (tuo *TaskUpdateOne) SetExecStartTime(i int64) *TaskUpdateOne {
	tuo.ExecStartTime = &i
	tuo.addExecStartTime = nil
	return tuo
}

// SetNillableExecStartTime sets the ExecStartTime field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableExecStartTime(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetExecStartTime(*i)
	}
	return tuo
}

// AddExecStartTime adds i to ExecStartTime.
func (tuo *TaskUpdateOne) AddExecStartTime(i int64) *TaskUpdateOne {
	if tuo.addExecStartTime == nil {
		tuo.addExecStartTime = &i
	} else {
		*tuo.addExecStartTime += i
	}
	return tuo
}

// ClearExecStartTime clears the value of ExecStartTime.
func (tuo *TaskUpdateOne) ClearExecStartTime() *TaskUpdateOne {
	tuo.ExecStartTime = nil
	tuo.clearExecStartTime = true
	return tuo
}

// SetExecStopTime sets the ExecStopTime field.
func (tuo *TaskUpdateOne) SetExecStopTime(i int64) *TaskUpdateOne {
	tuo.ExecStopTime = &i
	tuo.addExecStopTime = nil
	return tuo
}

// SetNillableExecStopTime sets the ExecStopTime field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableExecStopTime(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetExecStopTime(*i)
	}
	return tuo
}

// AddExecStopTime adds i to ExecStopTime.
func (tuo *TaskUpdateOne) AddExecStopTime(i int64) *TaskUpdateOne {
	if tuo.addExecStopTime == nil {
		tuo.addExecStopTime = &i
	} else {
		*tuo.addExecStopTime += i
	}
	return tuo
}

// ClearExecStopTime clears the value of ExecStopTime.
func (tuo *TaskUpdateOne) ClearExecStopTime() *TaskUpdateOne {
	tuo.ExecStopTime = nil
	tuo.clearExecStopTime = true
	return tuo
}

// SetContent sets the Content field.
func (tuo *TaskUpdateOne) SetContent(s string) *TaskUpdateOne {
	tuo.Content = &s
	return tuo
}

// SetOutput sets the Output field.
func (tuo *TaskUpdateOne) SetOutput(s []string) *TaskUpdateOne {
	tuo.Output = &s
	return tuo
}

// ClearOutput clears the value of Output.
func (tuo *TaskUpdateOne) ClearOutput() *TaskUpdateOne {
	tuo.Output = nil
	tuo.clearOutput = true
	return tuo
}

// SetError sets the Error field.
func (tuo *TaskUpdateOne) SetError(s string) *TaskUpdateOne {
	tuo.Error = &s
	return tuo
}

// SetNillableError sets the Error field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableError(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetError(*s)
	}
	return tuo
}

// ClearError clears the value of Error.
func (tuo *TaskUpdateOne) ClearError() *TaskUpdateOne {
	tuo.Error = nil
	tuo.clearError = true
	return tuo
}

// SetSessionID sets the SessionID field.
func (tuo *TaskUpdateOne) SetSessionID(s string) *TaskUpdateOne {
	tuo.SessionID = &s
	return tuo
}

// SetNillableSessionID sets the SessionID field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableSessionID(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetSessionID(*s)
	}
	return tuo
}

// ClearSessionID clears the value of SessionID.
func (tuo *TaskUpdateOne) ClearSessionID() *TaskUpdateOne {
	tuo.SessionID = nil
	tuo.clearSessionID = true
	return tuo
}

// SetTargetID sets the target edge to Target by id.
func (tuo *TaskUpdateOne) SetTargetID(id int) *TaskUpdateOne {
	if tuo.target == nil {
		tuo.target = make(map[int]struct{})
	}
	tuo.target[id] = struct{}{}
	return tuo
}

// SetTarget sets the target edge to Target.
func (tuo *TaskUpdateOne) SetTarget(t *Target) *TaskUpdateOne {
	return tuo.SetTargetID(t.ID)
}

// ClearTarget clears the target edge to Target.
func (tuo *TaskUpdateOne) ClearTarget() *TaskUpdateOne {
	tuo.clearedTarget = true
	return tuo
}

// Save executes the query and returns the updated entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	if tuo.Content != nil {
		if err := task.ContentValidator(*tuo.Content); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"Content\": %v", err)
		}
	}
	if len(tuo.target) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"target\"")
	}
	if tuo.clearedTarget && tuo.target == nil {
		return nil, errors.New("ent: clearing a unique edge \"target\"")
	}
	return tuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	t, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return t
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (t *Task, err error) {
	selector := sql.Select(task.Columns...).From(sql.Table(task.Table))
	task.ID(tuo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = tuo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		t = &Task{config: tuo.config}
		if err := t.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into Task: %v", err)
		}
		id = t.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("Task with id: %v", tuo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one Task with the same id: %v", tuo.id)
	}

	tx, err := tuo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		builder = sql.Update(task.Table).Where(sql.InInts(task.FieldID, ids...))
	)
	if value := tuo.QueueTime; value != nil {
		builder.Set(task.FieldQueueTime, *value)
		t.QueueTime = *value
	}
	if value := tuo.addQueueTime; value != nil {
		builder.Add(task.FieldQueueTime, *value)
		t.QueueTime += *value
	}
	if value := tuo.ClaimTime; value != nil {
		builder.Set(task.FieldClaimTime, *value)
		t.ClaimTime = *value
	}
	if value := tuo.addClaimTime; value != nil {
		builder.Add(task.FieldClaimTime, *value)
		t.ClaimTime += *value
	}
	if tuo.clearClaimTime {
		var value int64
		t.ClaimTime = value
		builder.SetNull(task.FieldClaimTime)
	}
	if value := tuo.ExecStartTime; value != nil {
		builder.Set(task.FieldExecStartTime, *value)
		t.ExecStartTime = *value
	}
	if value := tuo.addExecStartTime; value != nil {
		builder.Add(task.FieldExecStartTime, *value)
		t.ExecStartTime += *value
	}
	if tuo.clearExecStartTime {
		var value int64
		t.ExecStartTime = value
		builder.SetNull(task.FieldExecStartTime)
	}
	if value := tuo.ExecStopTime; value != nil {
		builder.Set(task.FieldExecStopTime, *value)
		t.ExecStopTime = *value
	}
	if value := tuo.addExecStopTime; value != nil {
		builder.Add(task.FieldExecStopTime, *value)
		t.ExecStopTime += *value
	}
	if tuo.clearExecStopTime {
		var value int64
		t.ExecStopTime = value
		builder.SetNull(task.FieldExecStopTime)
	}
	if value := tuo.Content; value != nil {
		builder.Set(task.FieldContent, *value)
		t.Content = *value
	}
	if value := tuo.Output; value != nil {
		buf, err := json.Marshal(*value)
		if err != nil {
			return nil, err
		}
		builder.Set(task.FieldOutput, buf)
		t.Output = *value
	}
	if tuo.clearOutput {
		var value []string
		t.Output = value
		builder.SetNull(task.FieldOutput)
	}
	if value := tuo.Error; value != nil {
		builder.Set(task.FieldError, *value)
		t.Error = *value
	}
	if tuo.clearError {
		var value string
		t.Error = value
		builder.SetNull(task.FieldError)
	}
	if value := tuo.SessionID; value != nil {
		builder.Set(task.FieldSessionID, *value)
		t.SessionID = *value
	}
	if tuo.clearSessionID {
		var value string
		t.SessionID = value
		builder.SetNull(task.FieldSessionID)
	}
	if !builder.Empty() {
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if tuo.clearedTarget {
		query, args := sql.Update(task.TargetTable).
			SetNull(task.TargetColumn).
			Where(sql.InInts(target.FieldID, ids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(tuo.target) > 0 {
		for eid := range tuo.target {
			query, args := sql.Update(task.TargetTable).
				Set(task.TargetColumn, eid).
				Where(sql.InInts(task.FieldID, ids...)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return t, nil
}
