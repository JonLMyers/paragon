// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/kcarretto/paragon/ent/predicate"
	"github.com/kcarretto/paragon/ent/target"
	"github.com/kcarretto/paragon/ent/task"
)

// TargetUpdate is the builder for updating Target entities.
type TargetUpdate struct {
	config
	Name            *string
	clearName       bool
	MachineUUID     *string
	PrimaryIP       *string
	clearPrimaryIP  bool
	PublicIP        *string
	clearPublicIP   bool
	PrimaryMAC      *string
	clearPrimaryMAC bool
	Hostname        *string
	clearHostname   bool
	LastSeen        *int64
	addLastSeen     *int64
	clearLastSeen   bool
	tasks           map[int]struct{}
	removedTasks    map[int]struct{}
	predicates      []predicate.Target
}

// Where adds a new predicate for the builder.
func (tu *TargetUpdate) Where(ps ...predicate.Target) *TargetUpdate {
	tu.predicates = append(tu.predicates, ps...)
	return tu
}

// SetName sets the Name field.
func (tu *TargetUpdate) SetName(s string) *TargetUpdate {
	tu.Name = &s
	return tu
}

// SetNillableName sets the Name field if the given value is not nil.
func (tu *TargetUpdate) SetNillableName(s *string) *TargetUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// ClearName clears the value of Name.
func (tu *TargetUpdate) ClearName() *TargetUpdate {
	tu.Name = nil
	tu.clearName = true
	return tu
}

// SetMachineUUID sets the MachineUUID field.
func (tu *TargetUpdate) SetMachineUUID(s string) *TargetUpdate {
	tu.MachineUUID = &s
	return tu
}

// SetPrimaryIP sets the PrimaryIP field.
func (tu *TargetUpdate) SetPrimaryIP(s string) *TargetUpdate {
	tu.PrimaryIP = &s
	return tu
}

// SetNillablePrimaryIP sets the PrimaryIP field if the given value is not nil.
func (tu *TargetUpdate) SetNillablePrimaryIP(s *string) *TargetUpdate {
	if s != nil {
		tu.SetPrimaryIP(*s)
	}
	return tu
}

// ClearPrimaryIP clears the value of PrimaryIP.
func (tu *TargetUpdate) ClearPrimaryIP() *TargetUpdate {
	tu.PrimaryIP = nil
	tu.clearPrimaryIP = true
	return tu
}

// SetPublicIP sets the PublicIP field.
func (tu *TargetUpdate) SetPublicIP(s string) *TargetUpdate {
	tu.PublicIP = &s
	return tu
}

// SetNillablePublicIP sets the PublicIP field if the given value is not nil.
func (tu *TargetUpdate) SetNillablePublicIP(s *string) *TargetUpdate {
	if s != nil {
		tu.SetPublicIP(*s)
	}
	return tu
}

// ClearPublicIP clears the value of PublicIP.
func (tu *TargetUpdate) ClearPublicIP() *TargetUpdate {
	tu.PublicIP = nil
	tu.clearPublicIP = true
	return tu
}

// SetPrimaryMAC sets the PrimaryMAC field.
func (tu *TargetUpdate) SetPrimaryMAC(s string) *TargetUpdate {
	tu.PrimaryMAC = &s
	return tu
}

// SetNillablePrimaryMAC sets the PrimaryMAC field if the given value is not nil.
func (tu *TargetUpdate) SetNillablePrimaryMAC(s *string) *TargetUpdate {
	if s != nil {
		tu.SetPrimaryMAC(*s)
	}
	return tu
}

// ClearPrimaryMAC clears the value of PrimaryMAC.
func (tu *TargetUpdate) ClearPrimaryMAC() *TargetUpdate {
	tu.PrimaryMAC = nil
	tu.clearPrimaryMAC = true
	return tu
}

// SetHostname sets the Hostname field.
func (tu *TargetUpdate) SetHostname(s string) *TargetUpdate {
	tu.Hostname = &s
	return tu
}

// SetNillableHostname sets the Hostname field if the given value is not nil.
func (tu *TargetUpdate) SetNillableHostname(s *string) *TargetUpdate {
	if s != nil {
		tu.SetHostname(*s)
	}
	return tu
}

// ClearHostname clears the value of Hostname.
func (tu *TargetUpdate) ClearHostname() *TargetUpdate {
	tu.Hostname = nil
	tu.clearHostname = true
	return tu
}

// SetLastSeen sets the LastSeen field.
func (tu *TargetUpdate) SetLastSeen(i int64) *TargetUpdate {
	tu.LastSeen = &i
	tu.addLastSeen = nil
	return tu
}

// SetNillableLastSeen sets the LastSeen field if the given value is not nil.
func (tu *TargetUpdate) SetNillableLastSeen(i *int64) *TargetUpdate {
	if i != nil {
		tu.SetLastSeen(*i)
	}
	return tu
}

// AddLastSeen adds i to LastSeen.
func (tu *TargetUpdate) AddLastSeen(i int64) *TargetUpdate {
	if tu.addLastSeen == nil {
		tu.addLastSeen = &i
	} else {
		*tu.addLastSeen += i
	}
	return tu
}

// ClearLastSeen clears the value of LastSeen.
func (tu *TargetUpdate) ClearLastSeen() *TargetUpdate {
	tu.LastSeen = nil
	tu.clearLastSeen = true
	return tu
}

// AddTaskIDs adds the tasks edge to Task by ids.
func (tu *TargetUpdate) AddTaskIDs(ids ...int) *TargetUpdate {
	if tu.tasks == nil {
		tu.tasks = make(map[int]struct{})
	}
	for i := range ids {
		tu.tasks[ids[i]] = struct{}{}
	}
	return tu
}

// AddTasks adds the tasks edges to Task.
func (tu *TargetUpdate) AddTasks(t ...*Task) *TargetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTaskIDs(ids...)
}

// RemoveTaskIDs removes the tasks edge to Task by ids.
func (tu *TargetUpdate) RemoveTaskIDs(ids ...int) *TargetUpdate {
	if tu.removedTasks == nil {
		tu.removedTasks = make(map[int]struct{})
	}
	for i := range ids {
		tu.removedTasks[ids[i]] = struct{}{}
	}
	return tu
}

// RemoveTasks removes tasks edges to Task.
func (tu *TargetUpdate) RemoveTasks(t ...*Task) *TargetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TargetUpdate) Save(ctx context.Context) (int, error) {
	return tu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TargetUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TargetUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TargetUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TargetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	selector := sql.Select(target.FieldID).From(sql.Table(target.Table))
	for _, p := range tu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = tu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := tu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		builder = sql.Update(target.Table).Where(sql.InInts(target.FieldID, ids...))
	)
	if value := tu.Name; value != nil {
		builder.Set(target.FieldName, *value)
	}
	if tu.clearName {
		builder.SetNull(target.FieldName)
	}
	if value := tu.MachineUUID; value != nil {
		builder.Set(target.FieldMachineUUID, *value)
	}
	if value := tu.PrimaryIP; value != nil {
		builder.Set(target.FieldPrimaryIP, *value)
	}
	if tu.clearPrimaryIP {
		builder.SetNull(target.FieldPrimaryIP)
	}
	if value := tu.PublicIP; value != nil {
		builder.Set(target.FieldPublicIP, *value)
	}
	if tu.clearPublicIP {
		builder.SetNull(target.FieldPublicIP)
	}
	if value := tu.PrimaryMAC; value != nil {
		builder.Set(target.FieldPrimaryMAC, *value)
	}
	if tu.clearPrimaryMAC {
		builder.SetNull(target.FieldPrimaryMAC)
	}
	if value := tu.Hostname; value != nil {
		builder.Set(target.FieldHostname, *value)
	}
	if tu.clearHostname {
		builder.SetNull(target.FieldHostname)
	}
	if value := tu.LastSeen; value != nil {
		builder.Set(target.FieldLastSeen, *value)
	}
	if value := tu.addLastSeen; value != nil {
		builder.Add(target.FieldLastSeen, *value)
	}
	if tu.clearLastSeen {
		builder.SetNull(target.FieldLastSeen)
	}
	if !builder.Empty() {
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(tu.removedTasks) > 0 {
		eids := make([]int, len(tu.removedTasks))
		for eid := range tu.removedTasks {
			eids = append(eids, eid)
		}
		query, args := sql.Update(target.TasksTable).
			SetNull(target.TasksColumn).
			Where(sql.InInts(target.TasksColumn, ids...)).
			Where(sql.InInts(task.FieldID, eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(tu.tasks) > 0 {
		for _, id := range ids {
			p := sql.P()
			for eid := range tu.tasks {
				p.Or().EQ(task.FieldID, eid)
			}
			query, args := sql.Update(target.TasksTable).
				Set(target.TasksColumn, id).
				Where(sql.And(p, sql.IsNull(target.TasksColumn))).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return 0, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return 0, rollback(tx, err)
			}
			if int(affected) < len(tu.tasks) {
				return 0, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"tasks\" %v already connected to a different \"Target\"", keys(tu.tasks))})
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// TargetUpdateOne is the builder for updating a single Target entity.
type TargetUpdateOne struct {
	config
	id              int
	Name            *string
	clearName       bool
	MachineUUID     *string
	PrimaryIP       *string
	clearPrimaryIP  bool
	PublicIP        *string
	clearPublicIP   bool
	PrimaryMAC      *string
	clearPrimaryMAC bool
	Hostname        *string
	clearHostname   bool
	LastSeen        *int64
	addLastSeen     *int64
	clearLastSeen   bool
	tasks           map[int]struct{}
	removedTasks    map[int]struct{}
}

// SetName sets the Name field.
func (tuo *TargetUpdateOne) SetName(s string) *TargetUpdateOne {
	tuo.Name = &s
	return tuo
}

// SetNillableName sets the Name field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableName(s *string) *TargetUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// ClearName clears the value of Name.
func (tuo *TargetUpdateOne) ClearName() *TargetUpdateOne {
	tuo.Name = nil
	tuo.clearName = true
	return tuo
}

// SetMachineUUID sets the MachineUUID field.
func (tuo *TargetUpdateOne) SetMachineUUID(s string) *TargetUpdateOne {
	tuo.MachineUUID = &s
	return tuo
}

// SetPrimaryIP sets the PrimaryIP field.
func (tuo *TargetUpdateOne) SetPrimaryIP(s string) *TargetUpdateOne {
	tuo.PrimaryIP = &s
	return tuo
}

// SetNillablePrimaryIP sets the PrimaryIP field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillablePrimaryIP(s *string) *TargetUpdateOne {
	if s != nil {
		tuo.SetPrimaryIP(*s)
	}
	return tuo
}

// ClearPrimaryIP clears the value of PrimaryIP.
func (tuo *TargetUpdateOne) ClearPrimaryIP() *TargetUpdateOne {
	tuo.PrimaryIP = nil
	tuo.clearPrimaryIP = true
	return tuo
}

// SetPublicIP sets the PublicIP field.
func (tuo *TargetUpdateOne) SetPublicIP(s string) *TargetUpdateOne {
	tuo.PublicIP = &s
	return tuo
}

// SetNillablePublicIP sets the PublicIP field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillablePublicIP(s *string) *TargetUpdateOne {
	if s != nil {
		tuo.SetPublicIP(*s)
	}
	return tuo
}

// ClearPublicIP clears the value of PublicIP.
func (tuo *TargetUpdateOne) ClearPublicIP() *TargetUpdateOne {
	tuo.PublicIP = nil
	tuo.clearPublicIP = true
	return tuo
}

// SetPrimaryMAC sets the PrimaryMAC field.
func (tuo *TargetUpdateOne) SetPrimaryMAC(s string) *TargetUpdateOne {
	tuo.PrimaryMAC = &s
	return tuo
}

// SetNillablePrimaryMAC sets the PrimaryMAC field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillablePrimaryMAC(s *string) *TargetUpdateOne {
	if s != nil {
		tuo.SetPrimaryMAC(*s)
	}
	return tuo
}

// ClearPrimaryMAC clears the value of PrimaryMAC.
func (tuo *TargetUpdateOne) ClearPrimaryMAC() *TargetUpdateOne {
	tuo.PrimaryMAC = nil
	tuo.clearPrimaryMAC = true
	return tuo
}

// SetHostname sets the Hostname field.
func (tuo *TargetUpdateOne) SetHostname(s string) *TargetUpdateOne {
	tuo.Hostname = &s
	return tuo
}

// SetNillableHostname sets the Hostname field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableHostname(s *string) *TargetUpdateOne {
	if s != nil {
		tuo.SetHostname(*s)
	}
	return tuo
}

// ClearHostname clears the value of Hostname.
func (tuo *TargetUpdateOne) ClearHostname() *TargetUpdateOne {
	tuo.Hostname = nil
	tuo.clearHostname = true
	return tuo
}

// SetLastSeen sets the LastSeen field.
func (tuo *TargetUpdateOne) SetLastSeen(i int64) *TargetUpdateOne {
	tuo.LastSeen = &i
	tuo.addLastSeen = nil
	return tuo
}

// SetNillableLastSeen sets the LastSeen field if the given value is not nil.
func (tuo *TargetUpdateOne) SetNillableLastSeen(i *int64) *TargetUpdateOne {
	if i != nil {
		tuo.SetLastSeen(*i)
	}
	return tuo
}

// AddLastSeen adds i to LastSeen.
func (tuo *TargetUpdateOne) AddLastSeen(i int64) *TargetUpdateOne {
	if tuo.addLastSeen == nil {
		tuo.addLastSeen = &i
	} else {
		*tuo.addLastSeen += i
	}
	return tuo
}

// ClearLastSeen clears the value of LastSeen.
func (tuo *TargetUpdateOne) ClearLastSeen() *TargetUpdateOne {
	tuo.LastSeen = nil
	tuo.clearLastSeen = true
	return tuo
}

// AddTaskIDs adds the tasks edge to Task by ids.
func (tuo *TargetUpdateOne) AddTaskIDs(ids ...int) *TargetUpdateOne {
	if tuo.tasks == nil {
		tuo.tasks = make(map[int]struct{})
	}
	for i := range ids {
		tuo.tasks[ids[i]] = struct{}{}
	}
	return tuo
}

// AddTasks adds the tasks edges to Task.
func (tuo *TargetUpdateOne) AddTasks(t ...*Task) *TargetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTaskIDs(ids...)
}

// RemoveTaskIDs removes the tasks edge to Task by ids.
func (tuo *TargetUpdateOne) RemoveTaskIDs(ids ...int) *TargetUpdateOne {
	if tuo.removedTasks == nil {
		tuo.removedTasks = make(map[int]struct{})
	}
	for i := range ids {
		tuo.removedTasks[ids[i]] = struct{}{}
	}
	return tuo
}

// RemoveTasks removes tasks edges to Task.
func (tuo *TargetUpdateOne) RemoveTasks(t ...*Task) *TargetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (tuo *TargetUpdateOne) Save(ctx context.Context) (*Target, error) {
	return tuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TargetUpdateOne) SaveX(ctx context.Context) *Target {
	t, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return t
}

// Exec executes the query on the entity.
func (tuo *TargetUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TargetUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TargetUpdateOne) sqlSave(ctx context.Context) (t *Target, err error) {
	selector := sql.Select(target.Columns...).From(sql.Table(target.Table))
	target.ID(tuo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = tuo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		t = &Target{config: tuo.config}
		if err := t.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into Target: %v", err)
		}
		id = t.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("Target with id: %v", tuo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one Target with the same id: %v", tuo.id)
	}

	tx, err := tuo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		builder = sql.Update(target.Table).Where(sql.InInts(target.FieldID, ids...))
	)
	if value := tuo.Name; value != nil {
		builder.Set(target.FieldName, *value)
		t.Name = *value
	}
	if tuo.clearName {
		var value string
		t.Name = value
		builder.SetNull(target.FieldName)
	}
	if value := tuo.MachineUUID; value != nil {
		builder.Set(target.FieldMachineUUID, *value)
		t.MachineUUID = *value
	}
	if value := tuo.PrimaryIP; value != nil {
		builder.Set(target.FieldPrimaryIP, *value)
		t.PrimaryIP = *value
	}
	if tuo.clearPrimaryIP {
		var value string
		t.PrimaryIP = value
		builder.SetNull(target.FieldPrimaryIP)
	}
	if value := tuo.PublicIP; value != nil {
		builder.Set(target.FieldPublicIP, *value)
		t.PublicIP = *value
	}
	if tuo.clearPublicIP {
		var value string
		t.PublicIP = value
		builder.SetNull(target.FieldPublicIP)
	}
	if value := tuo.PrimaryMAC; value != nil {
		builder.Set(target.FieldPrimaryMAC, *value)
		t.PrimaryMAC = *value
	}
	if tuo.clearPrimaryMAC {
		var value string
		t.PrimaryMAC = value
		builder.SetNull(target.FieldPrimaryMAC)
	}
	if value := tuo.Hostname; value != nil {
		builder.Set(target.FieldHostname, *value)
		t.Hostname = *value
	}
	if tuo.clearHostname {
		var value string
		t.Hostname = value
		builder.SetNull(target.FieldHostname)
	}
	if value := tuo.LastSeen; value != nil {
		builder.Set(target.FieldLastSeen, *value)
		t.LastSeen = *value
	}
	if value := tuo.addLastSeen; value != nil {
		builder.Add(target.FieldLastSeen, *value)
		t.LastSeen += *value
	}
	if tuo.clearLastSeen {
		var value int64
		t.LastSeen = value
		builder.SetNull(target.FieldLastSeen)
	}
	if !builder.Empty() {
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(tuo.removedTasks) > 0 {
		eids := make([]int, len(tuo.removedTasks))
		for eid := range tuo.removedTasks {
			eids = append(eids, eid)
		}
		query, args := sql.Update(target.TasksTable).
			SetNull(target.TasksColumn).
			Where(sql.InInts(target.TasksColumn, ids...)).
			Where(sql.InInts(task.FieldID, eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(tuo.tasks) > 0 {
		for _, id := range ids {
			p := sql.P()
			for eid := range tuo.tasks {
				p.Or().EQ(task.FieldID, eid)
			}
			query, args := sql.Update(target.TasksTable).
				Set(target.TasksColumn, id).
				Where(sql.And(p, sql.IsNull(target.TasksColumn))).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return nil, rollback(tx, err)
			}
			if int(affected) < len(tuo.tasks) {
				return nil, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"tasks\" %v already connected to a different \"Target\"", keys(tuo.tasks))})
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return t, nil
}
