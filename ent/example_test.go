// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"log"

	"github.com/facebookincubator/ent/dialect/sql"
)

// dsn for the database. In order to run the tests locally, run the following command:
//
//	 ENT_INTEGRATION_ENDPOINT="root:pass@tcp(localhost:3306)/test?parseTime=True" go test -v
//
var dsn string

func ExampleTarget() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the target's edges.
	t0 := client.Task.
		Create().
		SetQueueTime(1).
		SetClaimTime(1).
		SetExecStartTime(1).
		SetExecStopTime(1).
		SetContent("string").
		SetOutput(nil).
		SetError("string").
		SetSessionID("string").
		SaveX(ctx)
	log.Println("task created:", t0)

	// create target vertex with its edges.
	t := client.Target.
		Create().
		SetName("string").
		SetMachineUUID("string").
		SetPrimaryIP("string").
		SetPublicIP("string").
		SetPrimaryMAC("string").
		SetHostname("string").
		SetLastSeen(1).
		AddTasks(t0).
		SaveX(ctx)
	log.Println("target created:", t)

	// query edges.
	t0, err = t.QueryTasks().First(ctx)
	if err != nil {
		log.Fatalf("failed querying tasks: %v", err)
	}
	log.Println("tasks found:", t0)

	// Output:
}
func ExampleTask() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the task's edges.

	// create task vertex with its edges.
	t := client.Task.
		Create().
		SetQueueTime(1).
		SetClaimTime(1).
		SetExecStartTime(1).
		SetExecStopTime(1).
		SetContent("string").
		SetOutput(nil).
		SetError("string").
		SetSessionID("string").
		SaveX(ctx)
	log.Println("task created:", t)

	// query edges.

	// Output:
}
